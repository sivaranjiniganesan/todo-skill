{"version":3,"sources":["Nav.js","form.js","Create.js","Home.js","TableView.js","ProjOverview.js","App.js","reportWebVitals.js","index.js"],"names":["Nav","filter","createFilterOptions","Form","userInput","onFormChange","onFormSubmit","defaultValues","useState","skill","setskill","spl","setspl","cat","setcat","task","settask","Date","startDate","setStartDate","targetDate","settargetDate","Allskills","Allspl","i","length","indexOf","push","className","onSubmit","event","preventDefault","Autocomplete","onChange","console","log","target","textContent","filterOptions","options","params","filtered","inputValue","selectOnFocus","clearOnBlur","handleHomeEndKeys","renderOption","option","style","width","freeSolo","renderInput","TextField","label","variant","type","required","value","isSearchable","selected","date","Create","todo","setTodo","addTodo","setAddTodo","useEffect","fetch","then","response","ok","json","data","getLatestTodos","inputskill","inputtask","inputcat","inputstart","inputend","inputstatus","inputspl","method","body","JSON","stringify","start","end","status","headers","message","alert","Home","makeStyles","theme","root","paper","marginBottom","spacing","table","minWidth","visuallyHidden","border","clip","height","margin","overflow","padding","position","top","ProjOverview","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2181fc85.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport \"./Nav.css\"\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\nfunction Nav(){\r\n\r\n    \r\n  \r\n    return (\r\n        <div className=\"nav__black\">\r\n            \r\n            <div className=\"button-group\">\r\n            <h2 className=\"title\">Todo Skills</h2>\r\n            <button onClick={() => {window.location.href=\"/home\"}}>Home</button>\r\n            <button onClick={() => {window.location.href=\"/project_portfolio\"}}>Project Portfolio</button>\r\n            <button onClick={() => {window.location.href=\"/create\"}}>Create</button>\r\n           </div>\r\n           \r\n             <img \r\n            className=\"nav__avatar\" \r\n            src=\"https://vignette.wikia.nocookie.net/wiki-imperial/images/e/e2/Gouenji_preparando_pra_chutar..png/revision/latest?cb=20180510043458&path-prefix=pt-br\" \r\n            alt=\"Netflix Logo\"\r\n            ></img>\r\n           \r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Nav;","\r\nimport React, {useState} from 'react';\r\nimport Select from 'react-select';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"./form.css\"\r\nimport Autocomplete,\r\n{ createFilterOptions } from '@material-ui/lab/Autocomplete';\r\nconst filter = createFilterOptions();\r\n\r\nexport const Form = ({ userInput, onFormChange, onFormSubmit, defaultValues })=> {\r\n\r\n    const [skill, setskill] = useState([]) \r\n    const [spl, setspl] = useState([]) \r\n    const [cat, setcat] = useState([])  \r\n    const [task, settask] = useState([])\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const [targetDate, settargetDate] = useState();\r\n    const Allskills = []\r\n    const Allspl = []\r\n    for(let i=0; i< defaultValues.length; i++){\r\n      if(Allskills.indexOf(defaultValues[i].skill) === -1) { \r\n        Allskills.push(defaultValues[i].skill)\r\n      }\r\n      if(Allspl.indexOf(defaultValues[i].spl) === -1) { \r\n        Allspl.push(defaultValues[i].spl)\r\n      }\r\n  }\r\n    const handleChange_skill = (event)=>\r\n    {\r\n        console.log(event.target.textContent)\r\n        setskill(event.target.textContent)\r\n    }\r\n    const handleChange_spl = (event)=>\r\n    {\r\n        console.log(event.target.textContent)\r\n        setspl(event.target.textContent)\r\n    }\r\n    const handleChange_cat = (event)=>\r\n    {\r\n        console.log(event.value)\r\n        setcat(event.value)\r\n    }\r\n    const handleChange_task = (event)=>\r\n    {\r\n      console.log(event.target.value)\r\n        settask(event.target.value)\r\n    }\r\n   \r\n\r\n\r\n    const formSubmit = (event)=> {\r\n        event.preventDefault()\r\n        onFormSubmit(skill, task, cat, startDate, targetDate, \"Todo\", spl)\r\n    }\r\n    return(\r\n        <div className=\"createForm\">\r\n        <form onSubmit={formSubmit}>\r\n            {/* <input type='text' required className = \"skill\" value={userInput.skill} onChange={handleChange_skill}></input> */}\r\n            {/* <Select  isSearchable options={Allskills} onChange={handleChange_skill}/> */}\r\n            <Autocomplete\r\n            onChange={handleChange_spl}\r\n        filterOptions={(options, params) => {\r\n          const filtered = filter(options, params);\r\n          // Suggest the creation of a new value\r\n          if (params.inputValue !== '') {\r\n            filtered.push(`${params.inputValue}`);\r\n          }\r\n          return filtered;\r\n        }}\r\n        selectOnFocus\r\n        clearOnBlur\r\n        handleHomeEndKeys\r\n        options={Allspl}\r\n        renderOption={(option) => option}\r\n        style={{ width: 300 }}\r\n        freeSolo\r\n        renderInput={(params) => (\r\n          <TextField {...params} label=\"Enter Specialization\"\r\n            variant=\"outlined\" />\r\n        )}\r\n      /> \r\n      <Autocomplete\r\n            onChange={handleChange_skill}\r\n        filterOptions={(options, params) => {\r\n          const filtered = filter(options, params);\r\n          // Suggest the creation of a new value\r\n          if (params.inputValue !== '') {\r\n            filtered.push(`${params.inputValue}`);\r\n          }\r\n          return filtered;\r\n        }}\r\n        selectOnFocus\r\n        clearOnBlur\r\n        handleHomeEndKeys\r\n        options={Allskills}\r\n        renderOption={(option) => option}\r\n        style={{ width: 300 }}\r\n        freeSolo\r\n        renderInput={(params) => (\r\n          <TextField {...params} label=\"Enter Skill\"\r\n            variant=\"outlined\" />\r\n        )}\r\n      />    \r\n          <div className=\"task\">  <input type='text' required className = \"task\"  onChange={handleChange_task}></input></div>\r\n            <Select  isSearchable options={[{\"label\":\"Theory\",\"value\":\"Theory\"},{\"label\":\"Practical\",\"value\":\"Practical\"}]} onChange={handleChange_cat}/>\r\n            <DatePicker selected={startDate} onChange={(date) => setStartDate(date)} />\r\n            <DatePicker selected={targetDate} onChange={(date) => settargetDate(date)} />\r\n            <input className=\"submit\" type='submit'></input>\r\n        </form>\r\n        </div>\r\n        \r\n        )\r\n}","\r\nimport React , {useState, useEffect} from 'react';\r\nimport { Form } from \"./form\"\r\nimport { Card } from \"./Card\"\r\nfunction Create() {\r\n\r\n    const [todo, setTodo] = useState([])  \r\n    const [addTodo, setAddTodo] = useState([])\r\n  \r\n    useEffect(()=> {\r\n\r\n        fetch('/api').then(response => {\r\n          if(response.ok){\r\n            return response.json()\r\n          }\r\n        }).then(data => setTodo(data))\r\n      \r\n      },[])\r\n      \r\n    \r\n\r\n      const handleFormSubmit = (inputskill, inputtask,inputcat, inputstart,inputend,inputstatus,inputspl) => {\r\n    \r\n        setAddTodo({\r\n            'spl': inputspl,\r\n            'status' : inputstatus,\r\n            'skill': inputskill,\r\n            'task' : inputtask,\r\n            'cat': inputcat,\r\n            'start' : inputstart,\r\n            'end' : inputend\r\n        })\r\n          fetch('/create', {\r\n              method: 'POST',\r\n              body: JSON.stringify({\r\n                  skill: inputskill,\r\n                  task: inputtask,\r\n                  cat: inputcat,\r\n                  start : inputstart,\r\n                 end : inputend,\r\n                 spl:inputspl,\r\n                 status:inputstatus\r\n              }),\r\n              headers: {\r\n                  \"Content-Type\": \"application/json; chartset=UTF-8\"\r\n              }\r\n          }).then(response => response.json())\r\n            .then(message => {\r\n                console.log(message[201])\r\n                alert(message[201])\r\n                setAddTodo({\r\n                    'spl': \" \",\r\n                    'status' : \" \",\r\n                    'skill': \" \",\r\n                    'task' : \" \",\r\n                    'cat': \" \",\r\n                    'start' : \" \",\r\n                    'end' : \" \"\r\n                })\r\n                getLatestTodos()\r\n            })\r\n      }\r\n\r\n      const getLatestTodos = () => {\r\n          fetch('/api').then(response => {\r\n              if(response.ok){\r\n                  return response.json()\r\n              }\r\n          }).then(data => setTodo(data))\r\n      }\r\nconsole.log(\"Addtodo\")\r\nconsole.log(addTodo)\r\n    return (\r\n        <div className=\"Create\">\r\n           <h1>Create Task</h1>\r\n           <Form userInput={addTodo} defaultValues={todo} onFormSubmit={handleFormSubmit}></Form>\r\n        {/* <Card listOfTodos = {todo}/> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Create\r\n","import React, {useEffect, useState} from 'react'\r\nimport \"./home.css\"\r\nimport { CircularProgressbar } from 'react-circular-progressbar';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\nfunction Home() {\r\n    const [todo, setTodo] = useState([])\r\n    const [showskill, setshowskill] = useState(\"\") \r\n    const setshow = (skill) => {\r\n        if(showskill === skill)  setshowskill(\"\") \r\n        else if(showskill !== skill && showskill !== \"\")  setshowskill(skill)\r\n        else setshowskill(skill)\r\n        \r\n    }\r\n    useEffect(()=> {\r\n\r\n        fetch('/api').then(response => {\r\n          if(response.ok){\r\n            return response.json()\r\n          }\r\n        }).then(data => setTodo(data))\r\n        \r\n      \r\n      },[])\r\n      var skill_list = {},spl_list = {},skill_only=[],spl_only = [],total_done_tasks = {},spl_skills={},spl_task ={}\r\n      if (todo.length > 0) {\r\n      for(var i=0;i<todo.length;i++)\r\n      {\r\n        \r\n        if(!total_done_tasks[todo[i].spl])\r\n        total_done_tasks[todo[i].spl] = 0\r\n        if(todo[i].status === \"Done\")\r\n        total_done_tasks[todo[i].spl] ++\r\n      if(spl_only.indexOf(todo[i].spl) < 0)\r\n      {\r\n        spl_only.push(todo[i].spl)\r\n        if(skill_only.indexOf(todo[i].skill) < 0)\r\n        {\r\n          skill_only.push(todo[i].skill)\r\n           spl_list[todo[i].spl] = []\r\n           skill_list[todo[i].skill] = []\r\n           spl_task[todo[i].spl] = []\r\n          spl_list[todo[i].spl].push(todo[i].skill)\r\n          spl_task[todo[i].spl].push(todo[i].task)\r\n          skill_list[todo[i].skill].push(todo[i].task)\r\n        }\r\n        else {\r\n          skill_list[todo[i].skill].push(todo[i].task)\r\n          spl_task[todo[i].spl].push(todo[i].task)\r\n        }\r\n        \r\n      }\r\n      else {\r\n        if(skill_only.indexOf(todo[i].skill) < 0)\r\n        {\r\n          skill_only.push(todo[i].skill)\r\n           skill_list[todo[i].skill] = []\r\n          spl_list[todo[i].spl].push(todo[i].skill)\r\n          spl_task[todo[i].spl].push(todo[i].task)\r\n          skill_list[todo[i].skill].push(todo[i].task)\r\n        }\r\n        else {\r\n          skill_list[todo[i].skill].push(todo[i].task)\r\n          spl_task[todo[i].spl].push(todo[i].task)\r\n        }\r\n      }\r\n  \r\n}\r\n      }\r\n// console.log(spl_only)\r\n// console.log(spl_list)\r\n// console.log(skill_list)\r\n// console.log(spl_task)\r\n\r\n      if(Object.keys(spl_list).length > -1)\r\n      {\r\n        return (\r\n        \r\n            <div className=\"Home\">\r\n                <h1>Todo-Skills Overview</h1>\r\n                {spl_only.map(key =>{\r\n                  console.log(key)\r\n                       console.log(spl_list[key])\r\n                        return(\r\n                            <div>\r\n                        <div className=\"spl\" onClick={() => setshow(key)}>\r\n                            <h3>{key}</h3>\r\n                        <div className=\"label\">\r\n                        <label>Total skills: {spl_list[key].length}</label>\r\n                        <label>Total Tasks: {spl_task[key].length}</label>\r\n                        <label>Total Todo Tasks: { spl_task[key].length -total_done_tasks[key]}</label></div>\r\n                        <CircularProgressbar value={(total_done_tasks[key]/spl_task[key].length)*100} text={`${(total_done_tasks[key]/spl_task[key].length)*100}%`} />\r\n                       </div>\r\n                        {spl_list[key].map(key_skill =>{\r\n                          //  console.log(key_skill+\"==\")\r\n                          //  console.log(skill_list[spl_list[key_skill]])\r\n                          if(showskill === key)\r\n                         \r\n                            return( <div className=\"skills show\">\r\n                            <h3>{key_skill}</h3>\r\n                            <div className=\"label\"><label>Total Tasks: {skill_list[key_skill].length}</label>\r\n                            </div>\r\n                            </div>)\r\n                            else{\r\n                              return( <div className=\"skills hide\">\r\n                              <h3>{key_skill}</h3>\r\n                              <div className=\"label\"><label>Total Tasks: {skill_list[key_skill].length}</label>\r\n                              </div>\r\n                              </div>)\r\n                            }\r\n                           \r\n                        })}\r\n                        </div>\r\n                        )\r\n                    })}\r\n\r\n                    \r\n                \r\n            </div>\r\n        )\r\n      }\r\n      else\r\n      return(<h2>None to show</h2>)\r\n    \r\n  }\r\n\r\nexport default Home\r\n","import React from 'react';\r\nimport './TableView.css';\r\nimport {  makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\n\r\n\r\nconst headCells = [\r\n  { id: 'task', numeric: false, disablePadding: true, label: 'Tasks' },\r\n  { id: 'spl', numeric: true, disablePadding: false, label: 'Specialization' },\r\n  { id: 'skill', numeric: true, disablePadding: false, label: 'Skills' },\r\n  { id: 'cat', numeric: true, disablePadding: false, label: 'Task-Type' },\r\n  { id: 'start', numeric: true, disablePadding: false, label: 'Start Date' },\r\n  { id: 'end', numeric: true, disablePadding: false, label: 'Targeted Date' },\r\n  { id: 'status', numeric: true, disablePadding: false, label: 'Status' }\r\n  \r\n];\r\n\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount } = props;\r\n  \r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n      <TableCell>\r\n\r\n</TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'left'}\r\n            padding={headCell.disablePadding ? 'none' : 'normal'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            \r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n           \r\n          </TableCell>\r\n        ))}\r\n        \r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nexport const TableView = ({ todo, getLatestTodos })=> {\r\n\r\n//export default function TableView(row, getLatestTodos) {\r\n  const classes = useStyles();\r\n  const order = 'asc'\r\n  const orderBy = 'calories'\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const [msg, setMsg] =  React.useState([]);\r\n  var [rows, setrows] = React.useState([]);\r\n  //var rows = []\r\n console.log(todo)\r\n rows = todo\r\n \r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = rows.map((n) => n.task);\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n   \r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n//   const getLatestTodos = () => {\r\n//     fetch('/api').then(response => {\r\n//         if(response.ok){\r\n//             return response.json()\r\n//         }\r\n//     }).then(data => setrows(data))\r\n// }\r\n\r\n  const handleSave = () => {\r\n   for(var id=0;id<selected.length;id++)\r\n   {\r\n     \r\n    fetch('/change_status', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n       id:selected[id],\r\n       status: \"Todo\"\r\n    }),\r\n    headers: {\r\n        \"Content-Type\": \"application/json; chartset=UTF-8\"\r\n    }\r\n  }).then(response => response.json())\r\n  .then(message => console.log(message))\r\n    }\r\n    alert(\"Task/s Status Saved\")\r\n    getLatestTodos()\r\n   }\r\n\r\n   const handleDelete =() =>{\r\n    for(var id=0;id<selected.length;id++)\r\n   {\r\n     fetch(`/api/${selected[id]}`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n          id:selected[id]\r\n      })\r\n  }).then(response => response.json())\r\n    .then(message => {\r\n        console.log(message)\r\n    })\r\n   }\r\n   alert(\"Task/s Deleted\")\r\n   getLatestTodos()\r\n     }\r\n    \r\n \r\n   \r\n\r\n  const isSelected = (name,status) => {\r\n    if(selected.indexOf(name) !== -1)\r\n    return true;\r\n    else \r\n    return false;\r\n  }\r\n\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n  return (\r\n    \r\n    <div>\r\n     \r\n        <TableContainer>\r\n          <Table\r\n            \r\n            aria-labelledby=\"tableTitle\"\r\n            size='medium'\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              \r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              \r\n              rowCount={rows.length}\r\n            />\r\n            <TableBody>\r\n              {rows\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const isItemSelected = isSelected(row.id, row.status);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      onClick={(event) => handleClick(event, row.id)}\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row.task}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          checked={isItemSelected}\r\n                          inputProps={{ 'aria-labelledby': labelId }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                        {row.task}\r\n                      </TableCell>\r\n                      \r\n                      <TableCell align=\"right\">{row.spl}</TableCell>\r\n                      <TableCell align=\"right\">{row.skill}</TableCell>\r\n                      <TableCell align=\"right\">{row.cat}</TableCell>\r\n                      <TableCell align=\"right\">{row.start}</TableCell>\r\n                      <TableCell align=\"right\">{row.end}</TableCell>\r\n                     <TableCell align=\"right\" >{row.status}</TableCell>\r\n                     \r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {emptyRows > 0 && (\r\n                <TableRow>\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n       <div>\r\n    <input className=\"save\" type=\"button\" onClick={() => handleSave()} value=\"save\"></input>\r\n     <input className=\"delete\" type=\"button\" value=\"Delete Task/s\" onClick={()=> handleDelete()}></input>\r\n     </div>\r\n    </div>\r\n   \r\n   \r\n   \r\n   \r\n  );\r\n}\r\n","import React, {useState, useEffect} from 'react'\r\n// import TableView from \"./TableView.js\"\r\nimport { TableView } from \"./TableView\"\r\nimport Select from 'react-select';\r\n\r\nfunction ProjOverview() {\r\n    const [todo, setTodo] = useState([])  \r\n    const [todofilter, setfilter] = useState([])\r\n    var projects = []\r\n    var project_list = [{\"label\":\"All\",\"values\":\"All\"}]\r\n\r\n    useEffect(()=> {\r\n      fetch('/api').then(response => {\r\n        if(response.ok){\r\n          return response.json()\r\n        }\r\n      }).then(data => setTodofun(data))\r\n      },[])\r\n\r\n      const getTodo = () =>\r\n      {\r\n        fetch('/api').then(response => {\r\n          if(response.ok){\r\n            return response.json()\r\n          }\r\n        }).then(data => setTodofun(data))\r\n      }\r\n\r\n      const setTodofun = (data) =>\r\n      {\r\n        \r\n        setTodo(data)\r\n        setfilter(data)\r\n      }\r\n   \r\n    todofilter.map(values =>\r\n      projects.indexOf(values.spl) < 0 ? projects.push(values.spl) : console.log(\"\")\r\n     )\r\n     \r\n     projects.map(spl =>\r\n       project_list.push({\"label\":spl,\"values\":spl})\r\n     )\r\n      \r\n\r\n     const handleFilter = (spl) =>{\r\n      if(spl.values !== \"All\")\r\n      {\r\n        var copy_row = []\r\n        for(var i=0;i<todofilter.length;i++)\r\n          {            \r\n            if(todofilter[i].spl === spl.values)\r\n            copy_row.push(todofilter[i])\r\n          }\r\n          setTodo(copy_row)\r\n      }\r\n     else\r\n     getTodo()\r\n     \r\n    }\r\n\r\n    return (\r\n        <div className=\"ProjOverview\">\r\n           <h1>Project Portfolio</h1>\r\n           <Select defaultValue={{\"label\":\"All\",\"values\":\"All\"}} options={project_list} onChange={(spl) => handleFilter(spl)}></Select>\r\n           <TableView todo={todo} getLatestTodos={getTodo}></TableView>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProjOverview\r\n","import './App.css';\nimport Nav from \"./Nav\"\nimport Create from \"./Create\"\nimport Home from \"./Home\"\nimport ProjOverview from \"./ProjOverview\"\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       {/* <Router>  <Switch><Nav></Nav></Switch></Router> */}\n     \n     <Router>\n        <Switch>\n          {/* <Route path=\"/home\">\n            <Home></Home>\n          </Route>\n          <Route path=\"/project_portfolio\">\n          <ProjOverview></ProjOverview>\n          </Route> */}\n          <Route path=\"/create\">\n     <Create></Create>\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n// import './App.css';\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios'\n\n// function App() {\n//   const [getMessage, setGetMessage] = useState({})\n\n//   useEffect(()=>{\n//     axios.get('https://todo-skill.herokuapp.com/api').then(response => {\n//       console.log(\"SUCCESS\", response)\n//       setGetMessage(response)\n//     }).catch(error => {\n//       console.log(error)\n//     })\n\n//   }, [])\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n        \n//         <p>React + Flask Tutorial</p>\n//         <div>{getMessage.status === 200 ? \n//           <h3>{getMessage.data.message}</h3>\n//           :\n//           <h3>LOADING</h3>}</div>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}